


proto :

int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);


|								|
|pthread_t *thread				| Pointeur vers une variable qui recevra l'identifiant du thread créé.
|								| C’est ta “référence” pour ce thread.
|								|
|								|
|const pthread_attr_t *attr		| Attributs du thread (ex: taille de pile, priorités...).
|								| Tu peux mettre NULL pour les valeurs par défaut.
|								|
|								|
|void *(*start_routine)(void *)	| Pointeur vers la fonction que le thread doit exécuter.
|								| Elle doit toujours avoir la forme standard : void *f(void *arg)
|								|
|								|
|void *arg						| Argument que tu veux passer à la fonction du thread.
|								| Tu peux mettre NULL si tu n’as rien à passer.


Retour :
- 0 si la creation du thread a reussi
- ≠ 0 en cas d’erreur 


proto :

int pthread_join(pthread_t thread, void **retval);

|								|
|pthread_t thread				| ➤ L’identifiant du thread à attendre (ce que tu as reçu dans pthread_create)
|								| 
|								|
|void **retval					| Un pointeur vers une variable qui recevra ce que la fonction du thread a retourné.
|								| Tu peux mettre NULL si tu t’en fous.
|								|
